// <auto-generated />
using System;
using Application.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Oracle.EntityFrameworkCore.Metadata;

#nullable disable

namespace Application.Migrations
{
    [DbContext(typeof(ModelContext))]
    [Migration("20241223135526_UpdatePasswordHashSize")]
    partial class UpdatePasswordHashSize
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("USING_NLS_COMP")
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            OracleModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Application.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("Id");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Accountprivilege")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(1)")
                        .HasColumnName("ACCOUNTPRIVILEGE")
                        .HasDefaultValueSql("'n' ");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime?>("Createdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATE")
                        .HasColumnName("CREATEDATE")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(500)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(50)")
                        .HasColumnName("Email");

                    b.Property<string>("Imagelink")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(300)")
                        .HasColumnName("IMAGELINK");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(256)")
                        .HasColumnName("NormalizedEmail");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(256)")
                        .HasColumnName("NormalizedUserName");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(20)")
                        .HasColumnName("PasswordHash");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("SecurityStamp");

                    b.Property<string>("UserName")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(20)")
                        .HasColumnName("UserName");

                    b.HasKey("Id")
                        .HasName("PKACCOUNT");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("\"NormalizedUserName\" IS NOT NULL");

                    b.HasIndex(new[] { "Email" }, "SYS_C00191762")
                        .IsUnique()
                        .HasFilter("\"Email\" IS NOT NULL");

                    b.HasIndex(new[] { "UserName" }, "SYS_C00191763")
                        .IsUnique()
                        .HasFilter("\"UserName\" IS NOT NULL");

                    b.ToTable("ACCOUNT", (string)null);
                });

            modelBuilder.Entity("Application.Models.Anime", b =>
                {
                    b.Property<int>("Mediumid")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("MEDIUMID");

                    b.Property<string>("Studioname")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(20)")
                        .HasColumnName("STUDIONAME");

                    b.Property<string>("Type")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(5)")
                        .HasColumnName("TYPE")
                        .HasDefaultValueSql("'TV'");

                    b.HasKey("Mediumid")
                        .HasName("PKANIMEID");

                    b.HasIndex("Studioname");

                    b.ToTable("ANIME", (string)null);
                });

            modelBuilder.Entity("Application.Models.Author", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(5)
                        .HasColumnType("NUMBER(5)")
                        .HasColumnName("ID");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<string>("Image")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(300)")
                        .HasColumnName("IMAGE");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(30)")
                        .HasColumnName("NAME");

                    b.Property<string>("Wikipedialink")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(100)")
                        .HasColumnName("WIKIPEDIALINK");

                    b.HasKey("Id")
                        .HasName("PKAUTHOR");

                    b.ToTable("AUTHOR", (string)null);
                });

            modelBuilder.Entity("Application.Models.Badge", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(20)")
                        .HasColumnName("NAME");

                    b.Property<string>("Backgroundcolor")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(20)")
                        .HasColumnName("BACKGROUNDCOLOR")
                        .HasDefaultValueSql("'ffffff' ");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(100)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("Namecolor")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(20)")
                        .HasColumnName("NAMECOLOR")
                        .HasDefaultValueSql("'000000' ");

                    b.HasKey("Name")
                        .HasName("PKBADGE");

                    b.ToTable("BADGE", (string)null);
                });

            modelBuilder.Entity("Application.Models.Character", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(12)
                        .HasColumnType("NUMBER(12)")
                        .HasColumnName("ID");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(500)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("Image")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(300)")
                        .HasColumnName("IMAGE");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(30)")
                        .HasColumnName("NAME");

                    b.HasKey("Id")
                        .HasName("PKCHARACTER");

                    b.ToTable("CHARACTER", (string)null);
                });

            modelBuilder.Entity("Application.Models.Genre", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(24)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(24)")
                        .HasColumnName("NAME");

                    b.HasKey("Name")
                        .HasName("PKGENRE");

                    b.ToTable("GENRE", (string)null);
                });

            modelBuilder.Entity("Application.Models.Listelement", b =>
                {
                    b.Property<int>("Accountid")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("ACCOUNTID");

                    b.Property<int>("Mediumid")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("MEDIUMID");

                    b.Property<DateTime?>("Finishdate")
                        .HasColumnType("DATE")
                        .HasColumnName("FINISHDATE");

                    b.Property<byte?>("Finishednumber")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("FINISHEDNUMBER")
                        .HasDefaultValueSql("0 ");

                    b.Property<string>("Mediumcomment")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(200)")
                        .HasColumnName("MEDIUMCOMMENT");

                    b.Property<byte?>("Rating")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("RATING")
                        .HasDefaultValueSql("NULL ");

                    b.Property<DateTime?>("Startdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATE")
                        .HasColumnName("STARTDATE")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(13)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(13)")
                        .HasColumnName("STATUS")
                        .HasDefaultValueSql("'Watching' ");

                    b.HasKey("Accountid", "Mediumid")
                        .HasName("PKLISTELEMENT");

                    b.HasIndex("Mediumid");

                    b.ToTable("LISTELEMENT", (string)null);
                });

            modelBuilder.Entity("Application.Models.Manga", b =>
                {
                    b.Property<int>("Mediumid")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("MEDIUMID");

                    b.Property<short>("Authorid")
                        .HasPrecision(5)
                        .HasColumnType("NUMBER(5)")
                        .HasColumnName("AUTHORID");

                    b.Property<string>("Type")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(10)")
                        .HasColumnName("TYPE")
                        .HasDefaultValueSql("'Manga' ");

                    b.HasKey("Mediumid")
                        .HasName("PKMANGAID");

                    b.HasIndex("Authorid");

                    b.ToTable("MANGA", (string)null);
                });

            modelBuilder.Entity("Application.Models.Medium", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("ID");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte>("Count")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("COUNT")
                        .HasDefaultValueSql("0 ");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(1000)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(30)")
                        .HasColumnName("NAME");

                    b.Property<string>("Poster")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(300)")
                        .HasColumnName("POSTER");

                    b.Property<DateTime?>("Publishdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATE")
                        .HasColumnName("PUBLISHDATE")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(14)")
                        .HasColumnName("STATUS")
                        .HasDefaultValueSql("'Not finished'\n    ");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(1)")
                        .HasColumnName("TYPE");

                    b.HasKey("Id")
                        .HasName("PKMEDIUM");

                    b.ToTable("MEDIUM", (string)null);
                });

            modelBuilder.Entity("Application.Models.Review", b =>
                {
                    b.Property<int>("Accountid")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("ACCOUNTID");

                    b.Property<int>("Mediumid")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("MEDIUMID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(500)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("Feeling")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(17)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(17)")
                        .HasColumnName("FEELING")
                        .HasDefaultValueSql("'Recommended' ");

                    b.Property<DateTime>("Postdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATE")
                        .HasColumnName("POSTDATE")
                        .HasDefaultValueSql("CURRENT_DATE ");

                    b.HasKey("Accountid", "Mediumid")
                        .HasName("PKREVIEW");

                    b.HasIndex("Mediumid");

                    b.ToTable("REVIEW", (string)null);
                });

            modelBuilder.Entity("Application.Models.Studio", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(20)")
                        .HasColumnName("NAME");

                    b.Property<string>("Wikipedialink")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(100)")
                        .HasColumnName("WIKIPEDIALINK");

                    b.HasKey("Name")
                        .HasName("PKSTUDIO");

                    b.ToTable("STUDIO", (string)null);
                });

            modelBuilder.Entity("Friend", b =>
                {
                    b.Property<int>("Accountid1")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("ACCOUNTID1");

                    b.Property<int>("Accountid2")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("ACCOUNTID2");

                    b.HasKey("Accountid1", "Accountid2")
                        .HasName("PKFRIEND");

                    b.HasIndex("Accountid2");

                    b.ToTable("FRIEND", (string)null);
                });

            modelBuilder.Entity("Mediumcharacter", b =>
                {
                    b.Property<int>("Mediumid")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("MEDIUMID");

                    b.Property<long>("Characterid")
                        .HasPrecision(12)
                        .HasColumnType("NUMBER(12)")
                        .HasColumnName("CHARACTERID");

                    b.HasKey("Mediumid", "Characterid")
                        .HasName("PKMEDIUMCHARACTER");

                    b.HasIndex("Characterid");

                    b.ToTable("MEDIUMCHARACTER", (string)null);
                });

            modelBuilder.Entity("Mediumconnection", b =>
                {
                    b.Property<int>("Idmedium1")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("IDMEDIUM1");

                    b.Property<int>("Idmedium2")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("IDMEDIUM2");

                    b.HasKey("Idmedium1", "Idmedium2")
                        .HasName("PKMEDIUMCONNECTION");

                    b.HasIndex("Idmedium2");

                    b.ToTable("MEDIUMCONNECTION", (string)null);
                });

            modelBuilder.Entity("Mediumgenre", b =>
                {
                    b.Property<int>("Idmedium")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("IDMEDIUM");

                    b.Property<string>("Genrename")
                        .HasMaxLength(24)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(24)")
                        .HasColumnName("GENRENAME");

                    b.HasKey("Idmedium", "Genrename")
                        .HasName("PKMEDIUMGENRE");

                    b.HasIndex("Genrename");

                    b.ToTable("MEDIUMGENRE", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR2(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR2(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("\"NormalizedName\" IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<int>("RoleId")
                        .HasColumnType("NUMBER(10)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<int>("UserId")
                        .HasColumnType("NUMBER(10)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<int>("UserId")
                        .HasColumnType("NUMBER(10)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("NUMBER(10)");

                    b.Property<int>("RoleId")
                        .HasColumnType("NUMBER(10)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("NUMBER(10)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("Name")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("Value")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Userbadge", b =>
                {
                    b.Property<int>("Accountid")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("ACCOUNTID");

                    b.Property<string>("Badgename")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(20)")
                        .HasColumnName("BADGENAME");

                    b.HasKey("Accountid", "Badgename")
                        .HasName("PKUSERBADGE");

                    b.HasIndex("Badgename");

                    b.ToTable("USERBADGE", (string)null);
                });

            modelBuilder.Entity("Usercharacter", b =>
                {
                    b.Property<int>("Accountid")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("ACCOUNTID");

                    b.Property<long>("Characterid")
                        .HasPrecision(12)
                        .HasColumnType("NUMBER(12)")
                        .HasColumnName("CHARACTERID");

                    b.HasKey("Accountid", "Characterid")
                        .HasName("PKUSERCHARACTER");

                    b.HasIndex("Characterid");

                    b.ToTable("USERCHARACTER", (string)null);
                });

            modelBuilder.Entity("Application.Models.Anime", b =>
                {
                    b.HasOne("Application.Models.Medium", "Medium")
                        .WithOne("Anime")
                        .HasForeignKey("Application.Models.Anime", "Mediumid")
                        .IsRequired()
                        .HasConstraintName("FKANIMEID");

                    b.HasOne("Application.Models.Studio", "StudionameNavigation")
                        .WithMany("Animes")
                        .HasForeignKey("Studioname")
                        .IsRequired()
                        .HasConstraintName("FKNAMESTUDIO");

                    b.Navigation("Medium");

                    b.Navigation("StudionameNavigation");
                });

            modelBuilder.Entity("Application.Models.Listelement", b =>
                {
                    b.HasOne("Application.Models.Account", "Account")
                        .WithMany("Listelements")
                        .HasForeignKey("Accountid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FKELEMENTACCOUNTID");

                    b.HasOne("Application.Models.Medium", "Medium")
                        .WithMany("Listelements")
                        .HasForeignKey("Mediumid")
                        .IsRequired()
                        .HasConstraintName("FKELEMENTMEDIUM");

                    b.Navigation("Account");

                    b.Navigation("Medium");
                });

            modelBuilder.Entity("Application.Models.Manga", b =>
                {
                    b.HasOne("Application.Models.Author", "Author")
                        .WithMany("Mangas")
                        .HasForeignKey("Authorid")
                        .IsRequired()
                        .HasConstraintName("FKAUTHORID");

                    b.HasOne("Application.Models.Medium", "Medium")
                        .WithOne("Manga")
                        .HasForeignKey("Application.Models.Manga", "Mediumid")
                        .IsRequired()
                        .HasConstraintName("FKMANGAID");

                    b.Navigation("Author");

                    b.Navigation("Medium");
                });

            modelBuilder.Entity("Application.Models.Review", b =>
                {
                    b.HasOne("Application.Models.Account", "Account")
                        .WithMany("Reviews")
                        .HasForeignKey("Accountid")
                        .IsRequired()
                        .HasConstraintName("FKUSERREVIEW");

                    b.HasOne("Application.Models.Medium", "Medium")
                        .WithMany("Reviews")
                        .HasForeignKey("Mediumid")
                        .IsRequired()
                        .HasConstraintName("FKREVIEWMEDIUM");

                    b.Navigation("Account");

                    b.Navigation("Medium");
                });

            modelBuilder.Entity("Friend", b =>
                {
                    b.HasOne("Application.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("Accountid1")
                        .IsRequired()
                        .HasConstraintName("FKUSER1");

                    b.HasOne("Application.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("Accountid2")
                        .IsRequired()
                        .HasConstraintName("FKUSER2");
                });

            modelBuilder.Entity("Mediumcharacter", b =>
                {
                    b.HasOne("Application.Models.Character", null)
                        .WithMany()
                        .HasForeignKey("Characterid")
                        .IsRequired()
                        .HasConstraintName("FKCHARACTERMEDIUM");

                    b.HasOne("Application.Models.Medium", null)
                        .WithMany()
                        .HasForeignKey("Mediumid")
                        .IsRequired()
                        .HasConstraintName("FKMEDIUMCHARACTER");
                });

            modelBuilder.Entity("Mediumconnection", b =>
                {
                    b.HasOne("Application.Models.Medium", null)
                        .WithMany()
                        .HasForeignKey("Idmedium1")
                        .IsRequired()
                        .HasConstraintName("FKMEDIUMCONNECTION1");

                    b.HasOne("Application.Models.Medium", null)
                        .WithMany()
                        .HasForeignKey("Idmedium2")
                        .IsRequired()
                        .HasConstraintName("FKMEDIUMCONNECTION2");
                });

            modelBuilder.Entity("Mediumgenre", b =>
                {
                    b.HasOne("Application.Models.Genre", null)
                        .WithMany()
                        .HasForeignKey("Genrename")
                        .IsRequired()
                        .HasConstraintName("FKGENREMEDIUM");

                    b.HasOne("Application.Models.Medium", null)
                        .WithMany()
                        .HasForeignKey("Idmedium")
                        .IsRequired()
                        .HasConstraintName("FKMEDIUMGENRE");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Application.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Application.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Application.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Application.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Userbadge", b =>
                {
                    b.HasOne("Application.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("Accountid")
                        .IsRequired()
                        .HasConstraintName("FKUSERBADGE");

                    b.HasOne("Application.Models.Badge", null)
                        .WithMany()
                        .HasForeignKey("Badgename")
                        .IsRequired()
                        .HasConstraintName("FKBADGEUSER");
                });

            modelBuilder.Entity("Usercharacter", b =>
                {
                    b.HasOne("Application.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("Accountid")
                        .IsRequired()
                        .HasConstraintName("FKUSERCHARACTER");

                    b.HasOne("Application.Models.Character", null)
                        .WithMany()
                        .HasForeignKey("Characterid")
                        .IsRequired()
                        .HasConstraintName("FKCHARACTERUSER");
                });

            modelBuilder.Entity("Application.Models.Account", b =>
                {
                    b.Navigation("Listelements");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Application.Models.Author", b =>
                {
                    b.Navigation("Mangas");
                });

            modelBuilder.Entity("Application.Models.Medium", b =>
                {
                    b.Navigation("Anime");

                    b.Navigation("Listelements");

                    b.Navigation("Manga");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Application.Models.Studio", b =>
                {
                    b.Navigation("Animes");
                });
#pragma warning restore 612, 618
        }
    }
}
